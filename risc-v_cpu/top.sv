
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module top (

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	/* 24 bit clock divider, converts 50MHz clock signal to 2.98Hz */
	// logic [23:0] clkdiv;
	// logic ledclk;
	// assign ledclk = clkdiv[23];

	/* driver for LEDs */
	// logic [25:0] leds;
	// assign LEDR = leds[25:8];
	// assign LEDG = leds[7:0];

	/* LED state register, 0 means going left, 1 means going right */
	// logic ledstate;

// cpu and decoders
    logic [31:0] display;
    cpu my_CPU(.clk(CLOCK_50), .rst_n(KEY[0]), .io0_in(SW), .io2_out(display));
    hexdriver hex0(.val(display[3:0]), .hex(HEX0));
    hexdriver hex1(.val(display[7:4]), .hex(HEX1));
    hexdriver hex2(.val(display[11:8]), .hex(HEX2));
    hexdriver hex3(.val(display[15:12]), .hex(HEX3));
    hexdriver hex4(.val(display[19:16]), .hex(HEX4));
    hexdriver hex5(.val(display[23:20]), .hex(HEX5));
    hexdriver hex6(.val(display[27:24]), .hex(HEX6));
    hexdriver hex7(.val(display[31:28]), .hex(HEX7));


//=======================================================
//  Behavioral coding
//=======================================================


/*
	initial begin
		clkdiv = 26'h0;
		leds = 26'b1;
		ledstate = 1'b0;
	end

	always @(posedge CLOCK_50) begin
		clkdiv <= clkdiv + 1;
	end

	always @(posedge ledclk) begin
		if ( (ledstate == 0) && (leds == 26'b10000000000000000000000000) ) begin
			ledstate <= 1;
			leds <= leds >> 1;

		end else if (ledstate == 0) begin
			ledstate <= 0;
			leds <= leds << 1;

		end else if ( (ledstate == 1) && (leds == 26'b1) ) begin
			ledstate <= 0;
			leds <= leds << 1;

		end else begin
			leds <= leds >> 1;
		end
	end
*/
endmodule
